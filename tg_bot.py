import asyncio
import json
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ContentType
from aiogram.filters import CommandStart
from aiogram.utils.markdown import hbold
from config import token, user_id
from main import check_new_golf
import keybord as kb
import easyocr
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.options import Options
import re
from nomeroff_net import pipeline
from nomeroff_net.tools import unzip
import warnings
import time


bot = Bot(token=token)
dp = Dispatcher()

@dp.message(CommandStart())
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç!", reply_markup=kb.main)
    await message.reply("–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?")

@dp.message(F.text == "–ù–æ–≤—ñ –∞–≤—Ç–æ")
async def get_fresh_car(message: Message):
    fresh_golf = check_new_golf()
    if len(fresh_golf) >= 1:
        for k, v in sorted(fresh_golf.items()):
            car = f"{(v['Title'])}\n"\
                  f"{v['Price']}\n" \
                  f"{v['Location']}\n" \
                  f"{v['Url']}"
            await message.answer(car)
    else:
        await message.answer("–ù–æ–≤–∏—Ö –∞–≤—Ç–æ –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î...")

@dp.message(F.text == "–û—Å—Ç–∞–Ω–Ω—ñ 5 –∞–≤—Ç–æ")
async def get_latest_cars(message: Message):
    with open("all_golf_dict.json") as file:
        car_dict = json.load(file)
    for k, v in sorted(car_dict.items())[-5:]:
        car = f"{(v['Title'])}\n"\
              f"{v['Price']}\n" \
              f"{v['Location']}\n" \
              f"{v['Url']}"
        await message.answer(car)

@dp.message(F.text == "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
async def get_information(message: Message):
    await message.answer(
        f"{('üí¨ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è üí¨')}\n\n"
        f"–¶–µ–π –±–æ—Ç –≤–º—ñ—î —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞—Ç–∏ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è —Ç–∞ –Ω–∞–¥–∞–≤–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω—å–æ–≥–æ –∑ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –¥–∂–µ—Ä–µ–ª.\n\n"
        f"‚ùóÔ∏è–¶–µ –ª–∏—à–µ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –ø—Ä–æ—Ç–æ—Ç–∏–ø, –¥–µ—è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –±–æ—Ç–∞ –ø–æ–∫–∞–∑—É—é—Ç—å –ª–∏—à–µ –ø—Ä–∏–∫–ª–∞–¥ —Ä–æ–±–æ—Ç–∏.\n\n"
        f"üÜï–ù–æ–≤—ñ –∞–≤—Ç–æ: –≤—ñ–¥—Å—Ç–µ–∂—É—î –ø–æ—è–≤—É –Ω–æ–≤–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω–Ω—å(–Ω–∞ –ø—Ä–∏–∫–ª–∞–¥—ñ –º–∞—Ä–∫–∏ BMW)\n\n"
        f"5Ô∏è‚É£–û—Å—Ç–∞–Ω–Ω—ñ 5 –∞–≤—Ç–æ: –ø–æ–∫–∞–∑—É—î –æ—Å—Ç–∞–Ω–Ω—ñ 5 –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å(–Ω–∞ –ø—Ä–∏–∫–ª–∞–¥—ñ –º–∞—Ä–∫–∏ BMW)\n\n"
        f"ü§ñ–†–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ñ–æ—Ç–æ: —Ä–æ–∑–ø—ñ–∑–Ω–∞—î –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è –Ω–∞ —Ñ–æ—Ç–æ, —Ç–∞ –Ω–∞–¥–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω—å–æ–≥–æ –∑ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –¥–∂–µ—Ä–µ–ª\n\n"
        # f"üíæ –ö–æ–¥ –±–æ—Ç–∞ –Ω–∞ GitHub: https://github.com/bartos92\n"
    )

@dp.message(F.text == "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ")
async def download_photo(message: Message):
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ, —è–∫–µ –≤–∏ —Ö–æ—á–µ—Ç–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏.")

# –û–Ω–æ–≤–ª–µ–Ω–∏–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ —Ñ–æ—Ç–æ
@dp.message(F.content_type == ContentType.PHOTO)
async def handle_photo(message: Message):
    await message.answer(f"–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è...")
    photo = message.photo[-1]  # –û—Å—Ç–∞–Ω–Ω—î —Ñ–æ—Ç–æ –Ω–∞–π–≤–∏—â–æ—ó —è–∫–æ—Å—Ç—ñ
    file_info = await bot.get_file(photo.file_id)
    file_path = file_info.file_path
    file = await bot.download_file(file_path)

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ
    image_path = "downloaded_photo.jpg"
    with open(image_path, "wb") as f:
        f.write(file.getvalue())

    plate_text = read_plate(image_path)[0][0]

    # # –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
    # plate_text = recognize_text(image_path)[:10]
    # plate_text = re.sub(r"\s+", "", plate_text)
    print(plate_text)
    await message.answer(f"–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π –Ω–æ–º–µ—Ä: {plate_text}")
    await message.answer(f"–®—É–∫–∞—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å...")
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å
    car_info = get_car_info(plate_text)

    print(car_info)

    # –í–∏–≤–µ–¥–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    await message.answer(f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å:\n{car_info}")

    time.sleep(5)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ
def recognize_text(image_path):
    reader = easyocr.Reader(['en'])
    result = reader.readtext(image_path)
    plate_text = ""
    for detection in result:
        plate_text += detection[1] + " "
    return plate_text

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å
def get_car_info(number):
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±—Ä–∞—É–∑–µ—Ä–∞
    options = Options()
    options.headless = True  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –±–µ–∑–≥–æ–ª–æ–≤–∏–π —Ä–µ–∂–∏–º, —â–æ–± –Ω–µ –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏ –±—Ä–∞—É–∑–µ—Ä

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–µ–±-–¥—Ä–∞–π–≤–µ—Ä–∞
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)


    try:
    # –í—ñ–¥–∫—Ä–∏—Ç—Ç—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        plate_info_path = driver.get(f'https://ua.carplates.app/number/{number}')

        # –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É (–º–æ–∂–µ –∑–Ω–∞–¥–æ–±–∏—Ç–∏—Å—è –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏)
        driver.implicitly_wait(10)

        # –ó–±—ñ—Ä —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –Ω–∞–∑–≤—É, –º–æ–¥–µ–ª—å —Ç–∞ —Ä—ñ–∫ –º–∞—à–∏–Ω–∏
        brand = driver.find_element(By.CLASS_NAME, 'brand').text.strip()
        model = driver.find_element(By.CLASS_NAME, 'model').text.strip()
        make_year = driver.find_element(By.CLASS_NAME, 'make_year').text.strip()
        avg_price = driver.find_element(By.CLASS_NAME, 'price').text.strip()

        color_element = driver.find_element(By.XPATH, "//div[@class='horizontal-property is-selected' and .//span[text()='–ö–æ–ª—ñ—Ä']]//span[@class='primary-text']")
        color = color_element.text.strip()

        type_element = driver.find_element(By.XPATH, "//div[@class='horizontal-property' and .//span[text()='–¢–∏–ø']]//span[@class='primary-text']")
        car_type = type_element.text.strip()
        
        fuel_element = driver.find_element(By.XPATH, "//div[@class='horizontal-property' and .//span[text()='–ü–∞–ª–∏–≤–æ']]//span[@class='primary-text']")
        fuel_type = fuel_element.text.strip()
        
        engine_element = driver.find_element(By.XPATH, "//div[@class='horizontal-property' and .//span[text()=\"–û–±'—î–º –¥–≤–∏–≥—É–Ω–∞\"]]//span[@class='primary-text']")
        engine = engine_element.text.strip()
        
        weight_element = driver.find_element(By.XPATH, "//div[@class='horizontal-property' and .//span[text()='–ú–∞—Å–∞/–ú–∞–∫—Å. –º–∞—Å–∞']]//span[@class='primary-text']")
        weight = weight_element.text.strip()
        
        body_element = driver.find_element(By.XPATH, "//div[@class='horizontal-property' and .//span[text()='–ö–∞—Ç–µ–≥–æ—Ä—ñ—è/–ö—É–∑–æ–≤']]//span[@class='primary-text']")
        body = body_element.text.strip()
        
        # –í–∏–≤–µ–¥–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        car_info = (
                f'–ù–∞–∑–≤–∞: {brand}\n'
                f'–ú–æ–¥–µ–ª—å: {model}\n'
                f'–†—ñ–∫: {make_year}\n'
                f'–°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞ –Ω–∞ —Ä–∏–Ω–∫—É: {avg_price}\n'
                f'–ö–æ–ª—ñ—Ä: {color}\n'
                f'–¢–∏–ø: {car_type}\n'
                f'–ü–∞–ª–∏–≤–æ: {fuel_type}\n'
                f"–û–±'—î–º –¥–≤–∏–≥—É–Ω–∞: {engine}\n"
                f"–ú–∞—Å–∞/–ú–∞–∫—Å. –º–∞—Å–∞: {weight}\n"
                f"–ö—É–∑–æ–≤: {body}"
            )

        print(plate_info_path)

    except Exception as e:
        car_info = "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –¥–µ–∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω.."
    finally:
    # –ó–∞–∫—Ä–∏—Ç—Ç—è –≤–µ–±-–¥—Ä–∞–π–≤–µ—Ä–∞
        driver.quit()

    return car_info

def read_plate(img_path):
    number_plate_detection_and_reading = pipeline("number_plate_detection_and_reading", 
                                                  image_loader="opencv")

    (images, images_bboxs, 
     images_points, images_zones, region_ids, 
     region_names, count_lines, 
     confidences, texts) = unzip(number_plate_detection_and_reading([img_path]))
    
    return texts

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
# Suppress warnings from torchvision
    warnings.filterwarnings("ignore", module="torchvision")
    warnings.filterwarnings("ignore", module="nomeroff_net")

    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–í–∏–º–∫–Ω–µ–Ω–æ!")
